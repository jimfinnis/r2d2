Synth language syntax:


Start a new synth definition with

    newsynth <name>
    
New generators will now be added to this synth.


Add new generator and set current generator with

    g <type> <name>

Set the current generator to an existing one (for modification) with

    m <name>
    
Set parameters in current generator with

    p <param> <val>, <param> <val>, ... ;

Set current generator do be a "done monitor" with 

    done

When all done monitors have completed, the sound is finished. Only
envelope generators currently have completion semantics.

Set the current generator to be the audio output with

    out
    




Add links with

<outname> -> <inname>:<inportname>

Play notes with

: <freq>,<freq>,...;

Each note is separated by commas or semicolons, and terminated
by either (syntactic sugar!)
What this is really doing is running the note language:
number : stack a number
;,     : pop from the stack and play
*-/+%  : binary operators (e.g. "100 100+,")
d      : duplicate top of stack
r      : stack random number generated from two numbers on top
         of stack (e.g "100 200 r," will play a random freq from 100
         200).

So we can do
    :400 d,       # play a 400 but keep it 
    :-100 100 r+d, # add random val and play it
    :-100 100 r+d, # add random val and play it
    :-100 100 r+d, # add random val and play it

    

An example:

newsynth wibble 
g sin sosc1 out
p amp 0.1, freq 400;

g env myenv 
p l0 0, t0 0, l1 1, t1 0.1, t2 1, l2 0;
myenv->sosc1:amp
+ 400,420,330;
